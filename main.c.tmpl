#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

#define TO_WIN32

#include "reb-host.h"
#include "reb-ext-local.h"

#include "inc/fmod.h"
#include "inc/fmod_dsp.h"
#include "inc/fmod_errors.h"

#include "rebstr-fce.c"

RL_LIB *RL;


/* error handling */
FMOD_RESULT lastError;
void StoreError(FMOD_RESULT errType) {
	lastError = errType;
	RL->print((REBYTE*)"!!! FMOD ERROR: %d\n", errType);
}
#define ERRCHECK(result)\
{\
	if (result != FMOD_OK)\
	{\
		StoreError(result);\
		return RXR_FALSE;\
	}\
}
/* -------------- */
static u32* fmod_ext_words;

enum fmod_words {
	W_0=0,
<%RXT-WORDS-ENUM%>
};

enum fmod_commands {
	CMD_FMOD_init,
	CMD_FMOD_init_words,
	CMD_FMOD_GetLastError,
	CMD_FMOD_createSound,
	CMD_FMOD_createStream,
	CMD_FMOD_channelStop,
	CMD_FMOD_playSound,
	CMD_test_obj,
/* generated */
<%RXT-CMD-ENUM%>
};

const char *init_block =
	"REBOL [\n"
		"Title: {Testing FMOD extension}\n"
		"Name: FMOD\n"
		"Type: extension\n"
	"]\n"
	"export init: command []\n"
	"export init-words: command [words [block!]]\n"
	"init-words [<%RXT-WORDS%>]\n"
	"export GetLastError: command []\n"
	"export createSound: command [file [string!]]\n"
	"export createStream: command [file [string!]]\n"
	"export channelStop: command [channel [handle! none!]]\n"
	"export playSound: command [snd [handle!]]\n"
	"export test-obj: command [obj [object!]]\n"
/* generated */
<%RXT-CMD-INIT-BLOCK%>
;



static FMOD_SYSTEM *sys=NULL;
FMOD_RESULT 	 result;
FMOD_SOUND		*sound		   = 0;
FMOD_CHANNEL	*channel	   = 0;
FMOD_DSP		*dsplowpass    = 0;
FMOD_DSP		*dsphighpass   = 0;
FMOD_DSP		*dspecho	   = 0;
FMOD_DSP		*dspflange	   = 0;
FMOD_DSP		*dspdistortion = 0;
FMOD_DSP		*dspchorus	   = 0;
FMOD_DSP		*dspparameq    = 0;
char  *tmpBuffer1 = 0;
char  *tmpBuffer2 = 0;
char  *tmpBuffer3 = 0;
char  *tmpBuffer4 = 0;


RXIEXT const char *RX_Init(int opts, RL_LIB *lib) {
	RL = lib;
	unsigned int version;
	FMOD_System_Create( &sys );
	FMOD_System_GetVersion(sys, &version);
	RL->print((REBYTE*)"FMOD version: %d, require: %d\n", version, FMOD_VERSION);
	if (version < FMOD_VERSION) return "REBOL[]";
	tmpBuffer1=(char *)malloc(256);
	tmpBuffer2=(char *)malloc(256);
	tmpBuffer3=(char *)malloc(256);
	tmpBuffer4=(char *)malloc(256);
	return init_block;
}

int RX_Call(int cmd, RXIFRM *frm, void *data) {
	switch (cmd) {
		case CMD_FMOD_init: {

			ERRCHECK(FMOD_System_Init(sys, 32, FMOD_INIT_NORMAL, NULL));

			/*
				Create some effects to play with.
			*/
			ERRCHECK(FMOD_System_CreateDSPByType(sys, FMOD_DSP_TYPE_LOWPASS, &dsplowpass));
			ERRCHECK(FMOD_System_CreateDSPByType(sys, FMOD_DSP_TYPE_HIGHPASS, &dsphighpass));
			ERRCHECK(FMOD_System_CreateDSPByType(sys, FMOD_DSP_TYPE_ECHO, &dspecho));
			ERRCHECK(FMOD_System_CreateDSPByType(sys, FMOD_DSP_TYPE_FLANGE, &dspflange));
			ERRCHECK(FMOD_System_CreateDSPByType(sys, FMOD_DSP_TYPE_DISTORTION, &dspdistortion));
			ERRCHECK(FMOD_System_CreateDSPByType(sys, FMOD_DSP_TYPE_CHORUS, &dspchorus));
			ERRCHECK(FMOD_System_CreateDSPByType(sys, FMOD_DSP_TYPE_PARAMEQ, &dspparameq));

			return RXR_TRUE;
		}
		case CMD_FMOD_init_words: {
            fmod_ext_words = RL_MAP_WORDS(RXA_SERIES(frm,1));
            return RXR_UNSET;
		}
		case CMD_FMOD_GetLastError: {
			RXA_INT64(frm, 1) = (int)lastError;
			RXA_TYPE(frm, 1) = RXT_INTEGER;
			return RXR_VALUE;
		}
		case CMD_FMOD_createSound: {
			FMOD_SOUND *newSound = 0;
			const char *name = RebserToMultiByte(RXA_SERIES(frm, 1));
			result = FMOD_System_CreateSound(
			  sys,
			  name,
			  FMOD_HARDWARE | FMOD_LOOP_NORMAL | FMOD_2D,
			  0,
			  &newSound
			);
			free((void*)name);
			ERRCHECK(result);

			RL->print((REBYTE*)"newSound: %d\n", (REBINT)newSound);
			RXA_INT64(frm, 1) = (int)newSound;
			RXA_TYPE(frm, 1) = RXT_HANDLE;
			return RXR_VALUE;
		}
		case CMD_FMOD_createStream: {
			FMOD_SOUND *newSound = 0;
			const char *name = RebserToMultiByte(RXA_SERIES(frm, 1));
			result = FMOD_System_CreateStream(
				sys,
				name,
				FMOD_HARDWARE |FMOD_LOOP_NORMAL | FMOD_2D,
				0,
				&newSound
			);
			free((void*)name);
			ERRCHECK(result);

			RL->print((REBYTE*)"newStream: %d\n", (REBINT)newSound);
			RXA_INT64(frm, 1) = (int)newSound;
			RXA_TYPE(frm, 1) = RXT_HANDLE;
			return RXR_VALUE;
		}
		case CMD_FMOD_playSound: {
			RL->print((REBYTE*)"playSound: %d\n", (REBINT)RXA_HANDLE(frm, 1));
			result = FMOD_System_PlaySound(
			  sys,
			  FMOD_CHANNEL_FREE,
			  (FMOD_SOUND *)RXA_HANDLE(frm, 1),
			  FALSE,
			  &channel
			);
			ERRCHECK(result);

			RL->print((REBYTE*)"channel %d\n", (REBINT)channel);

			//FMOD_Channel_SetPan(channel, -1 );


		   // result = FMOD_System_AddDSP(sys, dspecho, 0);
		   // result = FMOD_System_AddDSP(sys, dspflange, 0);
			/*FMOD_Channel_SetReverbProperties(
			  &channel,
			  const FMOD_REVERB_CHANNELPROPERTIES *  prop
			);
			*/

			/*result = FMOD_Channel_SetPosition(
			  channel,
			  2000,
			  FMOD_TIMEUNIT_MS
			);
			ERRCHECK(result);
			*/
			//channel = newChannel;
			RXA_INT64(frm, 1) = (int)channel;
			RXA_TYPE(frm, 1) = RXT_HANDLE;
			return RXR_VALUE;
		}
		case CMD_FMOD_channelStop: {
			if (RXA_TYPE(frm, 1) == RXT_HANDLE) {
				channel = RXA_HANDLE(frm, 1);
			}
			result = FMOD_Channel_Stop(channel);
			ERRCHECK(result);
			return RXR_TRUE;
		}
		case CMD_test_obj: {

            FMOD_REVERB_PROPERTIES prop;
            ERRCHECK(FMOD_System_GetReverbProperties(sys, &prop));
            REBSER *obj=0;
            RXIARG val;

            RXV_INT64(val) = prop.Instance;
            RL_SET_FIELD(obj,fmod_ext_words[W_Instance],val,RXT_INTEGER);



			    //just testing.......
			    /*
            u32 *words, *w;
            REBSER *obj;
            REBCNT type;
            RXIARG result;
            obj = RXA_OBJECT(frm, 1);
            words = RL_WORDS_OF_OBJECT(obj);
            w = words;
            while ((type = RL_GET_FIELD(obj, w[0], &result))) {
                RL->print((REBYTE*)"word: %d %d\n", w[0], RL_FIND_WORD(fmod_ext_words,w[0]));
                switch(RL_FIND_WORD(fmod_ext_words,w[0])){
                    case W_Room: {
                        RL->print((REBYTE*)"Room: %d\n",4);
                        RXV_DEC64(result) = 3 * RXV_DEC64(result);
                        RL_SET_FIELD(obj, w[0], result, RXT_DECIMAL );
                        break;
                    }
                    case W_Reverb: {
                        RL->print((REBYTE*)"Reverb: %d\n",RXV_DEC64(result));
                        if (type == RXT_INTEGER) {
                            RXV_DEC64(result) = (float)RXV_INT64(result);
                            RL_SET_FIELD(obj, w[0], result, RXT_DECIMAL );
                        }
                        break;
                    }
                }
                //RL->print((REBYTE*)"type:\n");
                w++;
            }

            */
          //  RL_GET_FIELD(obj, RL_FIND_WORD(fmod_ext_words, 2), &result);
          //  RL->print((REBYTE*)"xxx: %d\n", RXV_INT64(result));
            RXA_OBJECT(frm, 1) = obj;
			RXA_TYPE(frm, 1) = RXT_OBJECT;
			return RXR_VALUE;
		}
/* generated */
<%RXT-CMD-CALL%>
	}
	return RXR_NO_COMMAND;
}
